
AVRASM ver. 2.1.2  ver_1.asm Thu Mar 05 00:42:15 2015

ver_1.asm(990): Including file 'ver_1.vec'
ver_1.asm(991): Including file 'ver_1.inc'
ver_1.inc(2): warning: Register r4 already defined by the .DEF directive
ver_1.asm(991): 'ver_1.inc' included form here
                 
                 
                 ;CodeVisionAVR C Compiler V1.24.8d Professional
                 ;(C) Copyright 1998-2006 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External SRAM size     : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote char to int    : No
                 ;char is unsigned       : Yes
                 ;8 bit enums            : No
                 ;Word align FLASH struct: No
                 ;Enhanced core instructions    : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+@1
                 	ANDI R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+@1
                 	ORI  R30,LOW(@2)
                 	STS  @0+@1,R30
                 	LDS  R30,@0+@1+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+@1+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	LDI  R30,0
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+@1)
                 	LDI  R31,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	LDI  R22,BYTE3(2*@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+@2)
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+@3)
                 	LDI  R@1,HIGH(@2+@3)
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+@3)
                 	LDI  R@1,HIGH(@2*2+@3)
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	LDS  R22,@0+@1+2
                 	LDS  R23,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+@2
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+@3
                 	LDS  R@1,@2+@3+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+@1
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+@1
                 	LDS  R27,@0+@1+1
                 	LDS  R24,@0+@1+2
                 	LDS  R25,@0+@1+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+@1,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+@1,R30
                 	STS  @0+@1+1,R31
                 	STS  @0+@1+2,R22
                 	STS  @0+@1+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+@1,R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+@1,R@2
                 	STS  @0+@1+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+@1
                 	LDS  R31,@0+@1+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+@1)
                 	LDI  R31,HIGH(2*@0+@1)
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+@1)
                 	LDI  R27,HIGH(@0+@1)
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CLR  R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z+,R0
                 	ST   Z,R0
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0
                 
                 	.INCLUDE "ver_1.vec"
                 
                 ;INTERRUPT VECTORS
000000 c047      	RJMP __RESET
000001 c166      	RJMP _external_int0
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 c155      	RJMP _timer0_overflow
00000a cff5      	RJMP 0x00
00000b c125      	RJMP _interuptrx
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 	.INCLUDE "ver_1.inc"
                 
                 	.DEF _data_serial=R4
                 _0:
000013 3130
000014 3332
000015 3534
000016 3736      	.DB  0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
000017 3938
000018 4241
000019 4443
00001a 4645      	.DB  0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46
00001b 6100
00001c 6362
00001d 6564
00001e 6766      	.DB  0x0,0x61,0x62,0x63,0x64,0x65,0x66,0x67
00001f 6968
000020 6b6a
000021 6d6c
000022 6f6e      	.DB  0x68,0x69,0x6A,0x6B,0x6C,0x6D,0x6E,0x6F
000023 0070
000024 7271
000025 7473
000026 7675      	.DB  0x70,0x0,0x71,0x72,0x73,0x74,0x75,0x76
000027 7877
000028 7a79
000029 3130
00002a 3332      	.DB  0x77,0x78,0x79,0x7A,0x30,0x31,0x32,0x33
00002b 3534
00002c 2100
00002d 2340
00002e 2524      	.DB  0x34,0x35,0x0,0x21,0x40,0x23,0x24,0x25
00002f 265e
000030 282a
000031 5f29
000032 3d2b      	.DB  0x5E,0x26,0x2A,0x28,0x29,0x5F,0x2B,0x3D
000033 7b2d
000034 3f7d
000035 4800
000036 4120      	.DB  0x2D,0x7B,0x7D,0x3F,0x0,0x48,0x20,0x41
000037 4320
000038 4b20
000039 2020
00003a 2041      	.DB  0x20,0x43,0x20,0x4B,0x20,0x20,0x41,0x20
00003b 2054
00003c 204f
00003d 004e
00003e 2020      	.DB  0x54,0x20,0x4F,0x20,0x4E,0x0,0x20,0x20
00003f 4920
000040 444e
000041 4e4f
000042 5345      	.DB  0x20,0x49,0x4E,0x44,0x4F,0x4E,0x45,0x53
000043 4149
000044 2020
000045 2020
ver_1.inc(16): warning: .cseg .db misalignment - padding zero byte
ver_1.asm(991): 'ver_1.inc' included form here
000046 0000      	.DB  0x49,0x41,0x20,0x20,0x20,0x20,0x0
                 
                 __GLOBAL_INI_TBL:
000047 0000      	.DW  0
                 _0x23:
                 
                 __RESET:
000048 94f8      	CLI
000049 27ee      	CLR  R30
00004a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004b e0f1      	LDI  R31,1
00004c bffb      	OUT  GICR,R31
00004d bfeb      	OUT  GICR,R30
00004e bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004f e1f8      	LDI  R31,0x18
000050 bdf1      	OUT  WDTCR,R31
000051 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000052 e08d      	LDI  R24,13
000053 e0a2      	LDI  R26,2
000054 27bb      	CLR  R27
                 __CLEAR_REG:
000055 93ed      	ST   X+,R30
000056 958a      	DEC  R24
000057 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000058 e080      	LDI  R24,LOW(0x400)
000059 e094      	LDI  R25,HIGH(0x400)
00005a e6a0      	LDI  R26,0x60
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e8ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;STACK POINTER INITIALIZATION
000070 e5ef      	LDI  R30,LOW(0x45F)
000071 bfed      	OUT  SPL,R30
000072 e0e4      	LDI  R30,HIGH(0x45F)
000073 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000074 e6c0      	LDI  R28,LOW(0x160)
000075 e0d1      	LDI  R29,HIGH(0x160)
                 
000076 c0fa      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 ;       1 /* File include */
                 ;       2 #include <mega8.h>
                 ;       3 #include <delay.h>    
                 ;       4 #include <stdio.h>    
                 ;       5 #include "lcdku.c"
                 ;       6 #ifndef __lcdku_C
                 ;       7 #define __lcdku_C
                 ;       8 
                 ;       9 #define   rs              PORTC.0//PORTC.2
                 ;      10 #define   enable          PORTC.1//PORTC.3
                 ;      11 #define	  clock           PORTC.2//PORTC.4
                 ;      12 #define   tx_LCD          PORTC.3 //PORTC.5
                 ;      13 
                 ;      14 
                 ;      15 void dataout(unsigned char data_LCD, char kode)
                 ;      16 {
                 
                 	.CSEG
                 _dataout:
                 ;      17   unsigned char i;
                 ;      18   clock=0;
000077 930a      	ST   -Y,R16
                 ;	data_LCD -> Y+2
                 ;	kode -> Y+1
                 ;	i -> R16
000078 98aa      	CBI  0x15,2
                 ;      19   for(i=0;i<8;i++)
000079 e000      	LDI  R16,LOW(0)
                 _0x4:
00007a 3008      	CPI  R16,8
00007b f008      	BRLO PC+2
00007c c019      	RJMP _0x5
                 ;      20   {
                 ;      21     tx_LCD=(data_LCD & 0x1)==0x1 ? 1 : 0;
00007d 81ea      	LDD  R30,Y+2
00007e 70e1      	ANDI R30,LOW(0x1)
00007f 30e1      	CPI  R30,LOW(0x1)
000080 f009      	BREQ PC+2
000081 c002      	RJMP _0x6
000082 e0e1      	LDI  R30,LOW(1)
000083 c001      	RJMP _0x7
                 _0x6:
000084 e0e0      	LDI  R30,LOW(0)
                 _0x7:
                 _0x8:
000085 d2f4      	RCALL __BSTB1
000086 b3a5      	IN   R26,0x15
000087 f9a3      	BLD  R26,3
000088 bba5      	OUT  0x15,R26
                 ;      22     delay_us(4);
000089 e08b
00008a 958a
00008b f7f1      	__DELAY_USB 11
                 ;      23     clock=1;
00008c 9aaa      	SBI  0x15,2
                 ;      24     delay_us(4);
00008d e08b
00008e 958a
00008f f7f1      	__DELAY_USB 11
                 ;      25     clock=0;
000090 98aa      	CBI  0x15,2
                 ;      26     data_LCD=data_LCD>>1;
000091 81ea      	LDD  R30,Y+2
000092 95e6      	LSR  R30
000093 83ea      	STD  Y+2,R30
                 ;      27   }
                 _0x3:
000094 5f0f      	SUBI R16,-1
000095 cfe4      	RJMP _0x4
                 _0x5:
                 ;      28   rs=kode;
000096 81e9      	LDD  R30,Y+1
000097 d2e2      	RCALL __BSTB1
000098 b3a5      	IN   R26,0x15
000099 f9a0      	BLD  R26,0
00009a bba5      	OUT  0x15,R26
                 ;      29   delay_us(40);
00009b d173      	RCALL SUBOPT_0x0
                 ;      30   enable=1;
00009c 9aa9      	SBI  0x15,1
                 ;      31   delay_us(40);
00009d d171      	RCALL SUBOPT_0x0
                 ;      32   enable=0;
00009e 98a9      	CBI  0x15,1
                 ;      33 }
00009f 8108      	LDD  R16,Y+0
0000a0 9623      	ADIW R28,3
0000a1 9508      	RET
                 ;      34 
                 ;      35 void pos(unsigned char i,unsigned char n)
                 ;      36 {
                 _pos:
                 ;      37   if(i==1)
                 ;	i -> Y+1
                 ;	n -> Y+0
0000a2 81a9      	LDD  R26,Y+1
0000a3 30a1      	CPI  R26,LOW(0x1)
0000a4 f009      	BREQ PC+2
0000a5 c004      	RJMP _0x9
                 ;      38   {
                 ;      39     dataout (0x80+n-1,0);
0000a6 81a8      	LD   R26,Y
0000a7 58a0      	SUBI R26,-LOW(128)
0000a8 d16a      	RCALL SUBOPT_0x1
                 ;      40     delay_us(40);
                 ;      41   }
                 ;      42   else if (i==2)
0000a9 c018      	RJMP _0xA
                 _0x9:
0000aa 81a9      	LDD  R26,Y+1
0000ab 30a2      	CPI  R26,LOW(0x2)
0000ac f009      	BREQ PC+2
0000ad c004      	RJMP _0xB
                 ;      43   {
                 ;      44     dataout (0xc0+n-1,0);
0000ae 81a8      	LD   R26,Y
0000af 54a0      	SUBI R26,-LOW(192)
0000b0 d162      	RCALL SUBOPT_0x1
                 ;      45     delay_us(40);
                 ;      46   }
                 ;      47   else if (i==3)
0000b1 c010      	RJMP _0xC
                 _0xB:
0000b2 81a9      	LDD  R26,Y+1
0000b3 30a3      	CPI  R26,LOW(0x3)
0000b4 f009      	BREQ PC+2
0000b5 c004      	RJMP _0xD
                 ;      48   {
                 ;      49     dataout (0x90+n-1,0);
0000b6 81a8      	LD   R26,Y
0000b7 57a0      	SUBI R26,-LOW(144)
0000b8 d15a      	RCALL SUBOPT_0x1
                 ;      50     delay_us(40);
                 ;      51   }
                 ;      52   else if (i==4)
0000b9 c008      	RJMP _0xE
                 _0xD:
0000ba 81a9      	LDD  R26,Y+1
0000bb 30a4      	CPI  R26,LOW(0x4)
0000bc f009      	BREQ PC+2
0000bd c004      	RJMP _0xF
                 ;      53   {
                 ;      54     dataout (0xd0+n-1,0);
0000be 81a8      	LD   R26,Y
0000bf 53a0      	SUBI R26,-LOW(208)
0000c0 d152      	RCALL SUBOPT_0x1
                 ;      55     delay_us(40);
                 ;      56   }
                 ;      57   else;
0000c1 c000      	RJMP _0x10
                 _0xF:
                 _0x10:
                 _0xE:
                 _0xC:
                 _0xA:
                 ;      58 }
0000c2 9622      	ADIW R28,2
0000c3 9508      	RET
                 ;      59 
                 ;      60 
                 ;      61 void busek()
                 ;      62 {
                 _busek:
                 ;      63         dataout(0x01,0);
0000c4 d154      	RCALL SUBOPT_0x2
                 ;      64         delay_ms(2);
0000c5 d158      	RCALL SUBOPT_0x3
0000c6 d247      	RCALL _delay_ms
                 ;      65 }
0000c7 9508      	RET
                 ;      66 
                 ;      67 
                 ;      68 void initlcd()
                 ;      69 {
                 _initlcd:
                 ;      70         delay_ms(1000);
0000c8 d15a      	RCALL SUBOPT_0x4
                 ;      71         dataout(0x30,0);
0000c9 d15e      	RCALL SUBOPT_0x5
                 ;      72         delay_ms(500);
0000ca efe4      	LDI  R30,LOW(500)
0000cb e0f1      	LDI  R31,HIGH(500)
0000cc d160      	RCALL SUBOPT_0x6
                 ;      73         dataout(0x30,0);
0000cd d15a      	RCALL SUBOPT_0x5
                 ;      74         delay_us(10000);
0000ce e280
0000cf e49e
0000d0 9701
0000d1 f7f1      	__DELAY_USW 20000
                 ;      75         dataout(0x30,0);
0000d2 d155      	RCALL SUBOPT_0x5
                 ;      76         delay_us(4000);
0000d3 d15c      	RCALL SUBOPT_0x7
                 ;      77         dataout(0x38,0);
0000d4 e3e8      	LDI  R30,LOW(56)
0000d5 d15f      	RCALL SUBOPT_0x8
                 ;      78         delay_us(4000);
                 ;      79         dataout(0x08,0);
0000d6 e0e8      	LDI  R30,LOW(8)
0000d7 d15d      	RCALL SUBOPT_0x8
                 ;      80         delay_us(4000);
                 ;      81         dataout(0x01,0);
0000d8 d140      	RCALL SUBOPT_0x2
                 ;      82         delay_us(4000);
0000d9 d156      	RCALL SUBOPT_0x7
                 ;      83         dataout(0x0c,0);
0000da e0ec      	LDI  R30,LOW(12)
0000db d159      	RCALL SUBOPT_0x8
                 ;      84         delay_us(4000);
                 ;      85         dataout(0x06,0);
0000dc e0e6      	LDI  R30,LOW(6)
0000dd d157      	RCALL SUBOPT_0x8
                 ;      86         delay_us(4000);
                 ;      87 }
0000de 9508      	RET
                 ;      88 
                 ;      89 
                 ;      90 void cetak(int i,int n,flash char *text)
                 ;      91 {
                 _cetak:
                 ;      92         pos(i,n);
                 ;	i -> Y+4
                 ;	n -> Y+2
                 ;	*text -> Y+0
0000df 81ec      	LDD  R30,Y+4
0000e0 93ea      	ST   -Y,R30
0000e1 81eb      	LDD  R30,Y+3
0000e2 d157      	RCALL SUBOPT_0x9
                 ;      93         while(*text)
                 _0x11:
0000e3 d158      	RCALL SUBOPT_0xA
0000e4 91e4      	LPM  R30,Z
0000e5 30e0      	CPI  R30,0
0000e6 f409      	BRNE PC+2
0000e7 c006      	RJMP _0x13
                 ;      94         {
                 ;      95                 dataout(*text++,1);
0000e8 d156      	RCALL SUBOPT_0xB
0000e9 9731      	SBIW R30,1
0000ea 91e4      	LPM  R30,Z
0000eb d158      	RCALL SUBOPT_0xC
                 ;      96                 delay_us(40);
0000ec d122      	RCALL SUBOPT_0x0
                 ;      97         }
0000ed cff5      	RJMP _0x11
                 _0x13:
                 ;      98 }     
0000ee 9626      	ADIW R28,6
0000ef 9508      	RET
                 ;      99 
                 ;     100 #endif
                 ;     101 #include "i2c.c"
                 ;     102 
                 ;     103 
                 ;     104 #asm
                 ;     105    .equ __i2c_port=0x18 ;PORTB
                    .equ __i2c_port=0x18 ;PORTB
                 ;     106    .equ __sda_bit=2
                    .equ __sda_bit=2
                 ;     107    .equ __scl_bit=7
                    .equ __scl_bit=7
                 ;     108 #endasm
                 ;     109 
                 ;     110 #include <i2c.h>
                 ;     111 //#include <stdio.h>
                 ;     112 
                 ;     113 
                 ;     114 #define EEPROM_ADDR    0xA0 
                 ;     115 
                 ;     116 
                 ;     117 unsigned char read_EEPROM(unsigned char alamat)
                 ;     118 {
                 ;     119      unsigned char datax;
                 ;     120      i2c_start();
                 ;	alamat -> Y+1
                 ;	datax -> R16
                 ;     121      i2c_write(EEPROM_ADDR);
                 ;     122      i2c_write(alamat);
                 ;     123      i2c_stop();
                 ;     124      i2c_start();
                 ;     125      i2c_write(EEPROM_ADDR | 1);
                 ;     126      datax = i2c_read(0);
                 ;     127      i2c_stop();
                 ;     128      return datax;
                 ;     129 }
                 ;     130 
                 ;     131 void write_EEPROM(unsigned char alamat, unsigned char nilai)
                 ;     132 {
                 ;     133      i2c_start();
                 ;	alamat -> Y+1
                 ;	nilai -> Y+0
                 ;     134      i2c_write(EEPROM_ADDR);
                 ;     135      i2c_write(alamat);
                 ;     136      i2c_write(nilai);
                 ;     137      i2c_stop();
                 ;     138      delay_ms(10);
                 ;     139 }
                 ;     140 
                 ;     141 
                 ;     142 
                 ;     143 /* Pendefinisian */    
                 ;     144 
                 ;     145 //pin 11,12,13,5
                 ;     146 
                 ;     147 #define ldr1       PIND.5    //PORTC.3  
                 ;     148 #define ldr2       PIND.6    //PORTC.3  
                 ;     149 #define ldr3       PIND.7    //PORTC.3  
                 ;     150 #define ldr4       PIND.3    //PORTC.3  
                 ;     151 #define led       PORTB.7    //PORTC.3  
                 ;     152 
                 ;     153 /* Inisialisasi variabel global */   
                 ;     154 unsigned int data_serial;
                 ;     155 bit tanda_rx;
                 ;     156 
                 ;     157 unsigned char kon(unsigned char n)
                 ;     158   {
                 _kon:
                 ;     159    if (n <10) return(n+0x30);
                 ;	n -> Y+0
0000f0 81a8      	LD   R26,Y
0000f1 30aa      	CPI  R26,LOW(0xA)
0000f2 f008      	BRLO PC+2
0000f3 c004      	RJMP _0x14
0000f4 81e8      	LD   R30,Y
0000f5 5de0      	SUBI R30,-LOW(48)
0000f6 9621      	ADIW R28,1
0000f7 9508      	RET
                 ;     160    else return(n+0x37);
                 _0x14:
0000f8 81e8      	LD   R30,Y
0000f9 5ce9      	SUBI R30,-LOW(55)
0000fa 9621      	ADIW R28,1
0000fb 9508      	RET
                 ;     161 
                 ;     162   }
                 _0x15:
0000fc 9621      	ADIW R28,1
0000fd 9508      	RET
                 ;     163 /*Inisialisasi input output */
                 ;     164 void init_port()
                 ;     165 {
                 _init_port:
                 ;     166         DDRD =0b00000011; 
0000fe e0e3      	LDI  R30,LOW(3)
0000ff bbe1      	OUT  0x11,R30
                 ;     167         PORTD=0b11111101;
000100 efed      	LDI  R30,LOW(253)
000101 bbe2      	OUT  0x12,R30
                 ;     168         DDRC =0b11001111;
000102 ecef      	LDI  R30,LOW(207)
000103 bbe4      	OUT  0x14,R30
                 ;     169         PORTC=0b11111111;
000104 efef      	LDI  R30,LOW(255)
000105 bbe5      	OUT  0x15,R30
                 ;     170         DDRB =0b11111111;
000106 bbe7      	OUT  0x17,R30
                 ;     171         PORTB=0b10111101;
000107 ebed      	LDI  R30,LOW(189)
000108 bbe8      	OUT  0x18,R30
                 ;     172 } 
000109 9508      	RET
                 ;     173 void initser()
                 ;     174 {
                 _initser:
                 ;     175      UBRRL=51;//25;
00010a e3e3      	LDI  R30,LOW(51)
00010b b9e9      	OUT  0x9,R30
                 ;     176      UBRRH=0;                     
00010c e0e0      	LDI  R30,LOW(0)
00010d bde0      	OUT  0x20,R30
                 ;     177      UCSRA=0x80;//aslinya 0
00010e e8e0      	LDI  R30,LOW(128)
00010f b9eb      	OUT  0xB,R30
                 ;     178      UCSRB=0x98; //Txd,Rxd Enabled aslinya 18
000110 e9e8      	LDI  R30,LOW(152)
000111 b9ea      	OUT  0xA,R30
                 ;     179      UCSRC=0x86; //8 bit data  
000112 e8e6      	LDI  R30,LOW(134)
000113 bde0      	OUT  0x20,R30
                 ;     180 }
000114 9508      	RET
                 ;     181 
                 ;     182 void kirimser(char TxData)
                 ;     183 {
                 _kirimser:
                 ;     184      UDR = TxData;   
                 ;	TxData -> Y+0
000115 81e8      	LD   R30,Y
000116 b9ec      	OUT  0xC,R30
                 ;     185 //     time_us(100);  
                 ;     186 } 
000117 9621      	ADIW R28,1
000118 9508      	RET
                 ;     187 
                 ;     188 void kirimtext(flash char *text)
                 ;     189 {
                 ;     190         
                 ;     191         while(*text)
                 ;	*text -> Y+0
                 ;     192         {
                 ;     193                 kirimser(*text++);
                 ;     194         }
                 ;     195 }     
                 ;     196 
                 ;     197 void inttim(char in)
                 ;     198 {
                 ;     199 if(in==0)TIMSK=TIMSK & 0xFE;
                 ;	in -> Y+0
                 ;     200 else TIMSK=TIMSK|0x1;
                 ;     201 }             
                 ;     202 
                 ;     203 void init_timer0()
                 ;     204 {       
                 ;     205         /* Timer ini akan digunakan sebagai penghitung kecepatan */
                 ;     206         /* Mode yang digunakan adalah normal */
                 ;     207         TCCR0=0x02;//3;
                 ;     208         TCNT0=-25;
                 ;     209         inttim(1);
                 ;     210 } 
                 ;     211 
                 ;     212 void init_ext_interrupt()
                 ;     213 {
                 ;     214         /* Set untuk interupt 0 rising edge */
                 ;     215         MCUCR=0x01;//3;//2;
                 ;     216         GICR=GICR|0x40; //0x40;
                 ;     217 }
                 ;     218 
                 ;     219 /* Turn registers saving off */
                 ;     220 #pragma savereg-
                 ;     221 /* interrupt handler */
                 ;     222 
                 ;     223 void tampilhex(long int biner)
                 ;     224 {
                 _tampilhex:
                 ;     225          long int ascii;
                 ;     226 //         ascii=biner; ascii=kon((ascii/0x100000)%0x10); dataout(ascii,1);
                 ;     227 //         ascii=biner; ascii=kon((ascii/0x10000)%0x10); dataout(ascii,1);
                 ;     228          ascii=biner; ascii=kon((ascii/0x1000)%0x10); dataout(ascii,1);
000119 d12e      	RCALL SUBOPT_0xD
                 ;	biner -> Y+4
                 ;	ascii -> Y+0
00011a e0e0
00011b e1f0
00011c e060
00011d e070      	__GETD1N 0x1000
00011e d137      	RCALL SUBOPT_0xE
                 ;     229          ascii=biner; ascii=kon((ascii/0x100)%0x10); dataout(ascii,1);
00011f d149      	RCALL SUBOPT_0xF
000120 e0e0
000121 e0f1
000122 e060
000123 e070      	__GETD1N 0x100
000124 d131      	RCALL SUBOPT_0xE
                 ;     230          ascii=biner; ascii=kon((ascii/0x10)%0x10); dataout(ascii,1);
000125 d143      	RCALL SUBOPT_0xF
000126 d14f      	RCALL SUBOPT_0x10
000127 d12e      	RCALL SUBOPT_0xE
                 ;     231          ascii=biner; ascii=kon(ascii%0x10); dataout(ascii,1);
000128 d140      	RCALL SUBOPT_0xF
000129 d14c      	RCALL SUBOPT_0x10
00012a d223      	RCALL __MODD21
00012b 93ea      	ST   -Y,R30
00012c dfc3      	RCALL _kon
00012d d14d      	RCALL SUBOPT_0x11
00012e d150      	RCALL SUBOPT_0x12
                 ;     232 }#pragma savereg+  
00012f 9628      	ADIW R28,8
000130 9508      	RET
                 ;     233 #pragma savereg-
                 ;     234 /* interrupt handler */
                 ;     235 interrupt [12] void interuptrx(void) 
                 ;     236 {               
                 _interuptrx:
                 ;     237 //     while((UCSRA & 0x80) == 0x00);
                 ;     238  //if(UDR=='a')tanda_rx=1;   
                 ;     239  data_serial=(data_serial<<8)+UDR;
000131 2df4      	MOV  R31,R4
000132 e0e0      	LDI  R30,LOW(0)
000133 01df      	MOVW R26,R30
000134 b1ec      	IN   R30,0xC
000135 e0f0      	LDI  R31,0
000136 0fea      	ADD  R30,R26
000137 1ffb      	ADC  R31,R27
000138 012f      	MOVW R4,R30
                 ;     240  tanda_rx=1;     
000139 9468      	SET
00013a f820      	BLD  R2,0
                 ;     241  pos(2,11);tampilhex(data_serial);
00013b e0e2      	LDI  R30,LOW(2)
00013c 93ea      	ST   -Y,R30
00013d e0eb      	LDI  R30,LOW(11)
00013e d0fb      	RCALL SUBOPT_0x9
00013f 01f2      	MOVW R30,R4
000140 2766      	CLR  R22
000141 2777      	CLR  R23
000142 d232      	RCALL __PUTPARD1
000143 dfd5      	RCALL _tampilhex
                 ;     242 //pos(2,1);tampilhex(data_serial);
                 ;     243 //data_serial=UDR;    
                 ;     244 } 
000144 9518      	RETI
                 ;     245 #pragma savereg+
                 ;     246 
                 ;     247 void tampil1(long int biner)
                 ;     248 {
                 _tampil1:
                 ;     249          long int ascii;
                 ;     250 
                 ;     251 //         ascii=biner; ascii=(ascii/1000000000)|0x30; dataout(ascii,1);
                 ;     252 //         ascii=biner; ascii=(ascii/100000000%10)|0x30; dataout(ascii,1);
                 ;     253 //         ascii=biner; ascii=(ascii/10000000%10)|0x30; dataout(ascii,1);
                 ;     254 //         ascii=biner; ascii=(ascii/1000000%10)|0x30; dataout(ascii,1);
                 ;     255 //         ascii=biner; ascii=(ascii/100000%10)|0x30; dataout(ascii,1);
                 ;     256 //         ascii=biner; ascii=(ascii/10000%10)|0x30; dataout(ascii,1);
                 ;     257 //         ascii=biner; ascii=(ascii/1000%10)|0x30; dataout(ascii,1);
                 ;     258 //         ascii=biner; ascii=((ascii/100)%10)|0x30; dataout(ascii,1);
                 ;     259 //         ascii=biner; ascii=((ascii/10)%10)|0x30; dataout(ascii,1);
                 ;     260          ascii=biner; ascii=(ascii%10)|0x30; dataout(ascii,1);
000145 d102      	RCALL SUBOPT_0xD
                 ;	biner -> Y+4
                 ;	ascii -> Y+0
000146 d13e      	RCALL SUBOPT_0x13
                 ;     261 }
000147 9628      	ADIW R28,8
000148 9508      	RET
                 ;     262 void tampil2(long int biner)
                 ;     263 {
                 ;     264          long int ascii;
                 ;     265 
                 ;     266 //         ascii=biner; ascii=(ascii/1000000000)|0x30; dataout(ascii,1);
                 ;     267 //         ascii=biner; ascii=(ascii/100000000%10)|0x30; dataout(ascii,1);
                 ;     268 //         ascii=biner; ascii=(ascii/10000000%10)|0x30; dataout(ascii,1);
                 ;     269 //         ascii=biner; ascii=(ascii/1000000%10)|0x30; dataout(ascii,1);
                 ;     270 //         ascii=biner; ascii=(ascii/100000%10)|0x30; dataout(ascii,1);
                 ;     271 //         ascii=biner; ascii=(ascii/10000%10)|0x30; dataout(ascii,1);
                 ;     272 //         ascii=biner; ascii=(ascii/1000%10)|0x30; dataout(ascii,1);
                 ;     273 //         ascii=biner; ascii=((ascii/100)%10)|0x30; dataout(ascii,1);
                 ;     274          ascii=biner; ascii=((ascii/10)%10)|0x30; dataout(ascii,1);
                 ;	biner -> Y+4
                 ;	ascii -> Y+0
                 ;     275          ascii=biner; ascii=(ascii%10)|0x30; dataout(ascii,1);
                 ;     276 }
                 ;     277 void tampil4(long int biner)
                 ;     278 {
                 _tampil4:
                 ;     279          long int ascii;
                 ;     280 
                 ;     281 //         ascii=biner; ascii=(ascii/1000000000)|0x30; dataout(ascii,1);
                 ;     282 //         ascii=biner; ascii=(ascii/100000000%10)|0x30; dataout(ascii,1);
                 ;     283 //         ascii=biner; ascii=(ascii/10000000%10)|0x30; dataout(ascii,1);
                 ;     284 //         ascii=biner; ascii=(ascii/1000000%10)|0x30; dataout(ascii,1);
                 ;     285 //         ascii=biner; ascii=(ascii/100000%10)|0x30; dataout(ascii,1);
                 ;     286 //         ascii=biner; ascii=(ascii/10000%10)|0x30; dataout(ascii,1);
                 ;     287          ascii=biner; ascii=(ascii/1000%10)|0x30; dataout(ascii,1);
000149 d0fe      	RCALL SUBOPT_0xD
                 ;	biner -> Y+4
                 ;	ascii -> Y+0
00014a eee8
00014b e0f3
00014c e060
00014d e070      	__GETD1N 0x3E8
00014e d13d      	RCALL SUBOPT_0x14
                 ;     288          ascii=biner; ascii=((ascii/100)%10)|0x30; dataout(ascii,1);
00014f d119      	RCALL SUBOPT_0xF
000150 e6e4
000151 e0f0
000152 e060
000153 e070      	__GETD1N 0x64
000154 d137      	RCALL SUBOPT_0x14
                 ;     289          ascii=biner; ascii=((ascii/10)%10)|0x30; dataout(ascii,1);
000155 d113      	RCALL SUBOPT_0xF
000156 e0ea
000157 e0f0
000158 e060
000159 e070      	__GETD1N 0xA
00015a d131      	RCALL SUBOPT_0x14
                 ;     290          ascii=biner; ascii=(ascii%10)|0x30; dataout(ascii,1);
00015b d10d      	RCALL SUBOPT_0xF
00015c d128      	RCALL SUBOPT_0x13
                 ;     291 }
00015d 9628      	ADIW R28,8
00015e 9508      	RET
                 ;     292 
                 ;     293 void tampilhex8(long int biner)
                 ;     294 {
                 ;     295          long int ascii;
                 ;     296  //        ascii=biner; ascii=kon((ascii/0x1000000000)%0x10); dataout(ascii,1);
                 ;     297  //        ascii=biner; ascii=kon((ascii/0x100000000)%0x10); dataout(ascii,1);
                 ;     298          ascii=biner; ascii=kon((ascii/0x10000000)%0x10); dataout(ascii,1);
                 ;	biner -> Y+4
                 ;	ascii -> Y+0
                 ;     299          ascii=biner; ascii=kon((ascii/0x1000000)%0x10); dataout(ascii,1);
                 ;     300          ascii=biner; ascii=kon((ascii/0x100000)%0x10); dataout(ascii,1);
                 ;     301          ascii=biner; ascii=kon((ascii/0x10000)%0x10); dataout(ascii,1);
                 ;     302          ascii=biner; ascii=kon((ascii/0x1000)%0x10); dataout(ascii,1);
                 ;     303          ascii=biner; ascii=kon((ascii/0x100)%0x10); dataout(ascii,1);
                 ;     304          ascii=biner; ascii=kon((ascii/0x10)%0x10); dataout(ascii,1);
                 ;     305          ascii=biner; ascii=kon(ascii%0x10); dataout(ascii,1);
                 ;     306 }
                 ;     307 void tampilhex2(long int biner)
                 ;     308 {
                 ;     309          long int ascii;
                 ;     310           ascii=biner; ascii=kon((ascii/0x10)%0x10); dataout(ascii,1);
                 ;	biner -> Y+4
                 ;	ascii -> Y+0
                 ;     311          ascii=biner; ascii=kon(ascii%0x10); dataout(ascii,1);
                 ;     312 }
                 ;     313 
                 ;     314 
                 ;     315 interrupt [10] void timer0_overflow(void) 
                 ;     316 {   
                 _timer0_overflow:
                 ;     317         #asm
                 ;     318         push r30
00015f 93ef              push r30
                 ;     319         push r31
000160 93ff              push r31
                 ;     320         in   r30,SREG
000161 b7ef              in   r30,SREG
                 ;     321         push r30
000162 93ef              push r30
                 ;     322         #endasm  
                 ;     323         
                 ;     324          #asm
                 ;     325         pop r30
000163 91ef              pop r30
                 ;     326         out SREG,r30
000164 bfef              out SREG,r30
                 ;     327         pop r31
000165 91ff              pop r31
                 ;     328         pop r30
000166 91ef              pop r30
                 ;     329         #endasm*
                 ;     330        
                 ;     331 }      
000167 9518      	RETI
                 ;     332 interrupt [2] void external_int0(void) 
                 ;     333 {
                 _external_int0:
                 ;     334         #asm
                 ;     335         push r30
000168 93ef              push r30
                 ;     336         push r31
000169 93ff              push r31
                 ;     337         in   r30,SREG
00016a b7ef              in   r30,SREG
                 ;     338         push r30
00016b 93ef              push r30
                 ;     339         #endasm        
                 ;     340           #asm
                 ;     341         pop r30
00016c 91ef              pop r30
                 ;     342         out SREG,r30
00016d bfef              out SREG,r30
                 ;     343         pop r31
00016e 91ff              pop r31
                 ;     344         pop r30
00016f 91ef              pop r30
                 ;     345         #endasm
                 ;     346 }
000170 9518      	RETI
                 ;     347 
                 ;     348 /* Program Utama */
                 ;     349 void main()
                 ;     350 {
                 _main:
                 ;     351 unsigned char data1,data2,data3,data4;   
                 ;     352 unsigned int ms_1,detik_1;
                 ;     353 
                 ;     354 
                 ;     355          /* Inisialisasi */
                 ;     356         init_port();//inisialisasi port 
000171 9722      	SBIW R28,2
                 ;	data1 -> R16
                 ;	data2 -> R17
                 ;	data3 -> R18
                 ;	data4 -> R19
                 ;	ms_1 -> R20,R21
                 ;	detik_1 -> Y+0
000172 df8b      	RCALL _init_port
                 ;     357         initser();
000173 df96      	RCALL _initser
                 ;     358         initlcd(); 
000174 df53      	RCALL _initlcd
                 ;     359 
                 ;     360         kirimser(0x2A);delay_ms(100);
000175 d11a      	RCALL SUBOPT_0x15
                 ;     361         kirimser(data1);delay_ms(100);
000176 d11f      	RCALL SUBOPT_0x16
                 ;     362         kirimser(data2);delay_ms(100);
000177 d123      	RCALL SUBOPT_0x17
                 ;     363         kirimser(data3);delay_ms(100);
000178 d127      	RCALL SUBOPT_0x18
                 ;     364         kirimser(data4);delay_ms(100);
000179 d12b      	RCALL SUBOPT_0x19
                 ;     365         kirimser(0x23);
00017a d12f      	RCALL SUBOPT_0x1A
                 ;     366         
                 ;     367 cetak(1,1,"0123456789ABCDEF"); 
00017b d131      	RCALL SUBOPT_0x1B
00017c d130      	RCALL SUBOPT_0x1B
00017d e2e6
00017e e0f0      	__POINTW1FN _0,0
00017f d132      	RCALL SUBOPT_0x1C
                 ;     368 cetak(2,1,"abcdefghijklmnop");
000180 d09d      	RCALL SUBOPT_0x3
000181 d12b      	RCALL SUBOPT_0x1B
000182 e3e7
000183 e0f0      	__POINTW1FN _0,17
000184 d12d      	RCALL SUBOPT_0x1C
                 ;     369 cetak(3,1,"qrstuvwxyz012345");
000185 e0e3      	LDI  R30,LOW(3)
000186 e0f0      	LDI  R31,HIGH(3)
000187 93fa      	ST   -Y,R31
000188 93ea      	ST   -Y,R30
000189 d123      	RCALL SUBOPT_0x1B
00018a e4e8
00018b e0f0      	__POINTW1FN _0,34
00018c d125      	RCALL SUBOPT_0x1C
                 ;     370 cetak(4,1,"!@#$%^&*()_+=-{}?");
00018d e0e4      	LDI  R30,LOW(4)
00018e e0f0      	LDI  R31,HIGH(4)
00018f 93fa      	ST   -Y,R31
000190 93ea      	ST   -Y,R30
000191 d11b      	RCALL SUBOPT_0x1B
000192 e5e9
000193 e0f0      	__POINTW1FN _0,51
000194 d11d      	RCALL SUBOPT_0x1C
                 ;     371 delay_ms(1000);
000195 d08d      	RCALL SUBOPT_0x4
                 ;     372 
                 ;     373         kirimser(0x2A);delay_ms(100);
000196 d0f9      	RCALL SUBOPT_0x15
                 ;     374         kirimser(data1);delay_ms(100);
000197 d0fe      	RCALL SUBOPT_0x16
                 ;     375         kirimser(data2);delay_ms(100);
000198 d102      	RCALL SUBOPT_0x17
                 ;     376         kirimser(data3);delay_ms(100);
000199 d106      	RCALL SUBOPT_0x18
                 ;     377         kirimser(data4);delay_ms(100);
00019a d10a      	RCALL SUBOPT_0x19
                 ;     378         kirimser(0x23);
00019b d10e      	RCALL SUBOPT_0x1A
                 ;     379 
                 ;     380 busek();
00019c df27      	RCALL _busek
                 ;     381 cetak(1,1,"H A C K  A T O N");          
00019d d10f      	RCALL SUBOPT_0x1B
00019e d10e      	RCALL SUBOPT_0x1B
00019f e6eb
0001a0 e0f0      	__POINTW1FN _0,69
0001a1 d110      	RCALL SUBOPT_0x1C
                 ;     382 cetak(2,1,"   INDONESIA    ");          
0001a2 d07b      	RCALL SUBOPT_0x3
0001a3 d109      	RCALL SUBOPT_0x1B
0001a4 e7ec
0001a5 e0f0      	__POINTW1FN _0,86
0001a6 d10b      	RCALL SUBOPT_0x1C
                 ;     383 //cetak(3,1,"    I D L E     ");          
                 ;     384 //cetak(4,1," W E L C O M E  ");          
                 ;     385 
                 ;     386 
                 ;     387 led=0;ms_1=0;detik_1=0;
0001a7 98c7      	CBI  0x18,7
0001a8 e040
0001a9 e050      	__GETWRN 20,21,0
0001aa e0e0      	LDI  R30,0
0001ab 83e8      	STD  Y+0,R30
0001ac 83e9      	STD  Y+0+1,R30
                 ;     388 do
                 _0x1C:
                 ;     389 {
                 ;     390 pos(3,1);tampil1(ldr1);pos(3,3);tampil1(ldr2);pos(3,5);tampil1(ldr3);pos(3,7);tampil1(ldr4); 
0001ad d107      	RCALL SUBOPT_0x1D
0001ae e0e1      	LDI  R30,LOW(1)
0001af d08a      	RCALL SUBOPT_0x9
0001b0 e0e0      	LDI  R30,0
0001b1 9985      	SBIC 0x10,5
0001b2 e0e1      	LDI  R30,1
0001b3 d104      	RCALL SUBOPT_0x1E
0001b4 e0e3      	LDI  R30,LOW(3)
0001b5 d084      	RCALL SUBOPT_0x9
0001b6 e0e0      	LDI  R30,0
0001b7 9986      	SBIC 0x10,6
0001b8 e0e1      	LDI  R30,1
0001b9 d0fe      	RCALL SUBOPT_0x1E
0001ba e0e5      	LDI  R30,LOW(5)
0001bb d07e      	RCALL SUBOPT_0x9
0001bc e0e0      	LDI  R30,0
0001bd 9987      	SBIC 0x10,7
0001be e0e1      	LDI  R30,1
0001bf d0f8      	RCALL SUBOPT_0x1E
0001c0 e0e7      	LDI  R30,LOW(7)
0001c1 d078      	RCALL SUBOPT_0x9
0001c2 e0e0      	LDI  R30,0
0001c3 9983      	SBIC 0x10,3
0001c4 e0e1      	LDI  R30,1
0001c5 d0b5      	RCALL SUBOPT_0x11
0001c6 d1ae      	RCALL __PUTPARD1
0001c7 df7d      	RCALL _tampil1
                 ;     391  ms_1++;
0001c8 5f4f
0001c9 4f5f      	__ADDWRN 20,21,1
                 ;     392 
                 ;     393 if (ms_1>500)
0001ca 3f45
0001cb e0e1
0001cc 075e      	__CPWRN 20,21,501
0001cd f408      	BRSH PC+2
0001ce c011      	RJMP _0x1E
                 ;     394         {ms_1=0;detik_1++;pos(4,1);tampil4(detik_1);
0001cf e040
0001d0 e050      	__GETWRN 20,21,0
0001d1 d06d      	RCALL SUBOPT_0xB
0001d2 e0e4      	LDI  R30,LOW(4)
0001d3 93ea      	ST   -Y,R30
0001d4 e0e1      	LDI  R30,LOW(1)
0001d5 d064      	RCALL SUBOPT_0x9
0001d6 d065      	RCALL SUBOPT_0xA
0001d7 2766      	CLR  R22
0001d8 2777      	CLR  R23
0001d9 d19b      	RCALL __PUTPARD1
0001da df6e      	RCALL _tampil4
                 ;     395                 if (led==0){led=1;}
0001db 99c7      	SBIC 0x18,7
0001dc c002      	RJMP _0x1F
0001dd 9ac7      	SBI  0x18,7
                 ;     396                 else {led=0;} 
0001de c001      	RJMP _0x20
                 _0x1F:
0001df 98c7      	CBI  0x18,7
                 _0x20:
                 ;     397         }    
                 ;     398 
                 ;     399 //delay_ms(1000); 
                 ;     400 
                 ;     401 
                 ;     402 
                 ;     403 if (detik_1>=5) 
                 _0x1E:
0001e0 81a8      	LD   R26,Y
0001e1 81b9      	LDD  R27,Y+1
0001e2 9715      	SBIW R26,5
0001e3 f408      	BRSH PC+2
0001e4 c01d      	RJMP _0x21
                 ;     404         {
                 ;     405         
                 ;     406         data1=0x30+ldr1;data2=0x30+ldr2;data3=0x30+ldr3;data4=0x30+ldr4;
0001e5 e0e0      	LDI  R30,0
0001e6 9985      	SBIC 0x10,5
0001e7 e0e1      	LDI  R30,1
0001e8 5de0      	SUBI R30,-LOW(48)
0001e9 2f0e      	MOV  R16,R30
0001ea e0e0      	LDI  R30,0
0001eb 9986      	SBIC 0x10,6
0001ec e0e1      	LDI  R30,1
0001ed 5de0      	SUBI R30,-LOW(48)
0001ee 2f1e      	MOV  R17,R30
0001ef e0e0      	LDI  R30,0
0001f0 9987      	SBIC 0x10,7
0001f1 e0e1      	LDI  R30,1
0001f2 5de0      	SUBI R30,-LOW(48)
0001f3 2f2e      	MOV  R18,R30
0001f4 e0e0      	LDI  R30,0
0001f5 9983      	SBIC 0x10,3
0001f6 e0e1      	LDI  R30,1
0001f7 5de0      	SUBI R30,-LOW(48)
0001f8 2f3e      	MOV  R19,R30
                 ;     407         kirimser(0x2A);delay_ms(100);
0001f9 d096      	RCALL SUBOPT_0x15
                 ;     408         kirimser(data1);delay_ms(100);
0001fa d09b      	RCALL SUBOPT_0x16
                 ;     409         kirimser(data2);delay_ms(100);
0001fb d09f      	RCALL SUBOPT_0x17
                 ;     410         kirimser(data3);delay_ms(100);
0001fc d0a3      	RCALL SUBOPT_0x18
                 ;     411         kirimser(data4);delay_ms(100);
0001fd d0a7      	RCALL SUBOPT_0x19
                 ;     412         kirimser(0x23);detik_1=0;}
0001fe d0ab      	RCALL SUBOPT_0x1A
0001ff e0e0      	LDI  R30,0
000200 83e8      	STD  Y+0,R30
000201 83e9      	STD  Y+0+1,R30
                 ;     413 }while(1);                       
                 _0x21:
                 _0x1B:
000202 cfaa      	RJMP _0x1C
                 _0x1D:
                 ;     414 }
000203 9622      	ADIW R28,2
                 _0x22:
000204 cfff      	RJMP _0x22
                 
                 _getchar:
000205 9b5f           sbis usr,rxc
000206 cffe           rjmp _getchar
000207 b1ec           in   r30,udr
000208 9508      	RET
                 _putchar:
000209 9b5d           sbis usr,udre
00020a cffe           rjmp _putchar
00020b 81e8           ld   r30,y
00020c b9ec           out  udr,r30
00020d 9621      	ADIW R28,1
00020e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x0:
00020f e68b
000210 958a
000211 f7f1      	__DELAY_USB 107
000212 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
000213 50a1      	SUBI R26,LOW(1)
000214 93aa      	ST   -Y,R26
000215 e0e0      	LDI  R30,LOW(0)
000216 93ea      	ST   -Y,R30
000217 de5f      	RCALL _dataout
000218 cff6      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000219 e0e1      	LDI  R30,LOW(1)
00021a 93ea      	ST   -Y,R30
00021b e0e0      	LDI  R30,LOW(0)
00021c 93ea      	ST   -Y,R30
00021d ce59      	RJMP _dataout
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00021e e0e2      	LDI  R30,LOW(2)
00021f e0f0      	LDI  R31,HIGH(2)
000220 93fa      	ST   -Y,R31
000221 93ea      	ST   -Y,R30
000222 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000223 eee8      	LDI  R30,LOW(1000)
000224 e0f3      	LDI  R31,HIGH(1000)
000225 93fa      	ST   -Y,R31
000226 93ea      	ST   -Y,R30
000227 c0e6      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
000228 e3e0      	LDI  R30,LOW(48)
000229 93ea      	ST   -Y,R30
00022a e0e0      	LDI  R30,LOW(0)
00022b 93ea      	ST   -Y,R30
00022c ce4a      	RJMP _dataout
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x6:
00022d 93fa      	ST   -Y,R31
00022e 93ea      	ST   -Y,R30
00022f c0de      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
000230 e480
000231 e19f
000232 9701
000233 f7f1      	__DELAY_USW 8000
000234 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x8:
000235 93ea      	ST   -Y,R30
000236 e0e0      	LDI  R30,LOW(0)
000237 93ea      	ST   -Y,R30
000238 de3e      	RCALL _dataout
000239 cff6      	RJMP SUBOPT_0x7
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
00023a 93ea      	ST   -Y,R30
00023b ce66      	RJMP _pos
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00023c 81e8      	LD   R30,Y
00023d 81f9      	LDD  R31,Y+1
00023e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
00023f dffc      	RCALL SUBOPT_0xA
000240 9631      	ADIW R30,1
000241 83e8      	ST   Y,R30
000242 83f9      	STD  Y+1,R31
000243 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0xC:
000244 93ea      	ST   -Y,R30
000245 e0e1      	LDI  R30,LOW(1)
000246 93ea      	ST   -Y,R30
000247 ce2f      	RJMP _dataout
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xD:
000248 9724      	SBIW R28,4
000249 81ec
00024a 81fd
00024b 816e
00024c 817f      	__GETD1S 4
00024d 83e8
00024e 83f9
00024f 836a
000250 837b      	__PUTD1S 0
000251 81a8
000252 81b9
000253 818a
000254 819b      	__GETD2S 0
000255 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:34 WORDS
                 SUBOPT_0xE:
000256 d0f2      	RCALL __DIVD21
000257 01df      	MOVW R26,R30
000258 01cb      	MOVW R24,R22
000259 e1e0
00025a e0f0
00025b e060
00025c e070      	__GETD1N 0x10
00025d d0f0      	RCALL __MODD21
00025e 93ea      	ST   -Y,R30
00025f de90      	RCALL _kon
000260 27ff      	CLR  R31
000261 2766      	CLR  R22
000262 2777      	CLR  R23
000263 83e8
000264 83f9
000265 836a
000266 837b      	__PUTD1S 0
000267 81e8      	LD   R30,Y
000268 cfdb      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0xF:
000269 81ec
00026a 81fd
00026b 816e
00026c 817f      	__GETD1S 4
00026d 83e8
00026e 83f9
00026f 836a
000270 837b      	__PUTD1S 0
000271 81a8
000272 81b9
000273 818a
000274 819b      	__GETD2S 0
000275 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000276 e1e0
000277 e0f0
000278 e060
000279 e070      	__GETD1N 0x10
00027a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x11:
00027b 27ff      	CLR  R31
00027c 2766      	CLR  R22
00027d 2777      	CLR  R23
00027e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x12:
00027f 83e8
000280 83f9
000281 836a
000282 837b      	__PUTD1S 0
000283 81e8      	LD   R30,Y
000284 cfbf      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x13:
000285 e0ea
000286 e0f0
000287 e060
000288 e070      	__GETD1N 0xA
000289 d0c4      	RCALL __MODD21
00028a 63e0      	ORI  R30,LOW(0x30)
00028b cff3      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x14:
00028c d0bc      	RCALL __DIVD21
00028d 01df      	MOVW R26,R30
00028e 01cb      	MOVW R24,R22
00028f cff5      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x15:
000290 e2ea      	LDI  R30,LOW(42)
000291 93ea      	ST   -Y,R30
000292 de82      	RCALL _kirimser
000293 e6e4      	LDI  R30,LOW(100)
000294 e0f0      	LDI  R31,HIGH(100)
000295 cf97      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x16:
000296 930a      	ST   -Y,R16
000297 de7d      	RCALL _kirimser
000298 e6e4      	LDI  R30,LOW(100)
000299 e0f0      	LDI  R31,HIGH(100)
00029a cf92      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x17:
00029b 931a      	ST   -Y,R17
00029c de78      	RCALL _kirimser
00029d e6e4      	LDI  R30,LOW(100)
00029e e0f0      	LDI  R31,HIGH(100)
00029f cf8d      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x18:
0002a0 932a      	ST   -Y,R18
0002a1 de73      	RCALL _kirimser
0002a2 e6e4      	LDI  R30,LOW(100)
0002a3 e0f0      	LDI  R31,HIGH(100)
0002a4 cf88      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x19:
0002a5 933a      	ST   -Y,R19
0002a6 de6e      	RCALL _kirimser
0002a7 e6e4      	LDI  R30,LOW(100)
0002a8 e0f0      	LDI  R31,HIGH(100)
0002a9 cf83      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
0002aa e2e3      	LDI  R30,LOW(35)
0002ab 93ea      	ST   -Y,R30
0002ac ce68      	RJMP _kirimser
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x1B:
0002ad e0e1      	LDI  R30,LOW(1)
0002ae e0f0      	LDI  R31,HIGH(1)
0002af 93fa      	ST   -Y,R31
0002b0 93ea      	ST   -Y,R30
0002b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x1C:
0002b2 93fa      	ST   -Y,R31
0002b3 93ea      	ST   -Y,R30
0002b4 ce2a      	RJMP _cetak
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
0002b5 e0e3      	LDI  R30,LOW(3)
0002b6 93ea      	ST   -Y,R30
0002b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x1E:
0002b8 dfc2      	RCALL SUBOPT_0x11
0002b9 d0bb      	RCALL __PUTPARD1
0002ba de8a      	RCALL _tampil1
0002bb cff9      	RJMP SUBOPT_0x1D
                 
                 	.equ __i2c_dir=__i2c_port-1
                 	.equ __i2c_pin=__i2c_port-2
                 _i2c_init:
0002bc 98c7      	cbi  __i2c_port,__scl_bit
0002bd 98c2      	cbi  __i2c_port,__sda_bit
0002be 9abf      	sbi  __i2c_dir,__scl_bit
0002bf 98ba      	cbi  __i2c_dir,__sda_bit
0002c0 c015      	rjmp __i2c_delay2
                 _i2c_start:
0002c1 98ba      	cbi  __i2c_dir,__sda_bit
0002c2 98bf      	cbi  __i2c_dir,__scl_bit
0002c3 27ee      	clr  r30
0002c4 0000      	nop
0002c5 9bb2      	sbis __i2c_pin,__sda_bit
0002c6 9508      	ret
0002c7 9bb7      	sbis __i2c_pin,__scl_bit
0002c8 9508      	ret
0002c9 d004      	rcall __i2c_delay1
0002ca 9aba      	sbi  __i2c_dir,__sda_bit
0002cb d002      	rcall __i2c_delay1
0002cc 9abf      	sbi  __i2c_dir,__scl_bit
0002cd e0e1      	ldi  r30,1
                 __i2c_delay1:
0002ce e06d      	ldi  r22,13
0002cf c007      	rjmp __i2c_delay2l
                 _i2c_stop:
0002d0 9aba      	sbi  __i2c_dir,__sda_bit
0002d1 9abf      	sbi  __i2c_dir,__scl_bit
0002d2 d003      	rcall __i2c_delay2
0002d3 98bf      	cbi  __i2c_dir,__scl_bit
0002d4 dff9      	rcall __i2c_delay1
0002d5 98ba      	cbi  __i2c_dir,__sda_bit
                 __i2c_delay2:
0002d6 e16b      	ldi  r22,27
                 __i2c_delay2l:
0002d7 956a      	dec  r22
0002d8 f7f1      	brne __i2c_delay2l
0002d9 9508      	ret
                 _i2c_read:
0002da e078      	ldi  r23,8
                 __i2c_read0:
0002db 98bf      	cbi  __i2c_dir,__scl_bit
0002dc dff1      	rcall __i2c_delay1
                 __i2c_read3:
0002dd 9bb7      	sbis __i2c_pin,__scl_bit
0002de cffe      	rjmp __i2c_read3
0002df dfee      	rcall __i2c_delay1
0002e0 9488      	clc
0002e1 99b2      	sbic __i2c_pin,__sda_bit
0002e2 9408      	sec
0002e3 9abf      	sbi  __i2c_dir,__scl_bit
0002e4 dff1      	rcall __i2c_delay2
0002e5 1fee      	rol  r30
0002e6 957a      	dec  r23
0002e7 f799      	brne __i2c_read0
0002e8 9179      	ld   r23,y+
0002e9 2377      	tst  r23
0002ea f411      	brne __i2c_read1
0002eb 98ba      	cbi  __i2c_dir,__sda_bit
0002ec c001      	rjmp __i2c_read2
                 __i2c_read1:
0002ed 9aba      	sbi  __i2c_dir,__sda_bit
                 __i2c_read2:
0002ee dfdf      	rcall __i2c_delay1
0002ef 98bf      	cbi  __i2c_dir,__scl_bit
0002f0 dfe5      	rcall __i2c_delay2
0002f1 9abf      	sbi  __i2c_dir,__scl_bit
0002f2 dfdb      	rcall __i2c_delay1
0002f3 98ba      	cbi  __i2c_dir,__sda_bit
0002f4 cfd9      	rjmp __i2c_delay1
                 
                 _i2c_write:
0002f5 91e9      	ld   r30,y+
0002f6 e078      	ldi  r23,8
                 __i2c_write0:
0002f7 0fee      	lsl  r30
0002f8 f410      	brcc __i2c_write1
0002f9 98ba      	cbi  __i2c_dir,__sda_bit
0002fa c001      	rjmp __i2c_write2
                 __i2c_write1:
0002fb 9aba      	sbi  __i2c_dir,__sda_bit
                 __i2c_write2:
0002fc dfd9      	rcall __i2c_delay2
0002fd 98bf      	cbi  __i2c_dir,__scl_bit
0002fe dfcf      	rcall __i2c_delay1
                 __i2c_write3:
0002ff 9bb7      	sbis __i2c_pin,__scl_bit
000300 cffe      	rjmp __i2c_write3
000301 dfcc      	rcall __i2c_delay1
000302 9abf      	sbi  __i2c_dir,__scl_bit
000303 957a      	dec  r23
000304 f791      	brne __i2c_write0
000305 98ba      	cbi  __i2c_dir,__sda_bit
000306 dfc7      	rcall __i2c_delay1
000307 98bf      	cbi  __i2c_dir,__scl_bit
000308 dfcd      	rcall __i2c_delay2
000309 e0e1      	ldi  r30,1
00030a 99b2      	sbic __i2c_pin,__sda_bit
00030b 27ee      	clr  r30
00030c 9abf      	sbi  __i2c_dir,__scl_bit
00030d 9508      	ret
                 
                 _delay_ms:
00030e 91e9      	ld   r30,y+
00030f 91f9      	ld   r31,y+
000310 9630      	adiw r30,0
000311 f039      	breq __delay_ms1
                 __delay_ms0:
000312 ed80
000313 e097
000314 9701
000315 f7f1      	__DELAY_USW 0x7D0
000316 95a8      	wdr
000317 9731      	sbiw r30,1
000318 f7c9      	brne __delay_ms0
                 __delay_ms1:
000319 9508      	ret
                 
                 __ANEGD1:
00031a 95e0      	COM  R30
00031b 95f0      	COM  R31
00031c 9560      	COM  R22
00031d 9570      	COM  R23
00031e 5fef      	SUBI R30,-1
00031f 4fff      	SBCI R31,-1
000320 4f6f      	SBCI R22,-1
000321 4f7f      	SBCI R23,-1
000322 9508      	RET
                 
                 __DIVD21U:
000323 933f      	PUSH R19
000324 934f      	PUSH R20
000325 935f      	PUSH R21
000326 2400      	CLR  R0
000327 2411      	CLR  R1
000328 2733      	CLR  R19
000329 2744      	CLR  R20
00032a e250      	LDI  R21,32
                 __DIVD21U1:
00032b 0faa      	LSL  R26
00032c 1fbb      	ROL  R27
00032d 1f88      	ROL  R24
00032e 1f99      	ROL  R25
00032f 1c00      	ROL  R0
000330 1c11      	ROL  R1
000331 1f33      	ROL  R19
000332 1f44      	ROL  R20
000333 1a0e      	SUB  R0,R30
000334 0a1f      	SBC  R1,R31
000335 0b36      	SBC  R19,R22
000336 0b47      	SBC  R20,R23
000337 f428      	BRCC __DIVD21U2
000338 0e0e      	ADD  R0,R30
000339 1e1f      	ADC  R1,R31
00033a 1f36      	ADC  R19,R22
00033b 1f47      	ADC  R20,R23
00033c c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00033d 60a1      	SBR  R26,1
                 __DIVD21U3:
00033e 955a      	DEC  R21
00033f f759      	BRNE __DIVD21U1
000340 01fd      	MOVW R30,R26
000341 01bc      	MOVW R22,R24
000342 01d0      	MOVW R26,R0
000343 2f83      	MOV  R24,R19
000344 2f94      	MOV  R25,R20
000345 915f      	POP  R21
000346 914f      	POP  R20
000347 913f      	POP  R19
000348 9508      	RET
                 
                 __DIVD21:
000349 d018      	RCALL __CHKSIGND
00034a dfd8      	RCALL __DIVD21U
00034b f40e      	BRTC __DIVD211
00034c dfcd      	RCALL __ANEGD1
                 __DIVD211:
00034d 9508      	RET
                 
                 __MODD21:
00034e 94e8      	CLT
00034f ff97      	SBRS R25,7
000350 c009      	RJMP __MODD211
000351 95a0      	COM  R26
000352 95b0      	COM  R27
000353 9580      	COM  R24
000354 9590      	COM  R25
000355 5faf      	SUBI R26,-1
000356 4fbf      	SBCI R27,-1
000357 4f8f      	SBCI R24,-1
000358 4f9f      	SBCI R25,-1
000359 9468      	SET
                 __MODD211:
00035a fd77      	SBRC R23,7
00035b dfbe      	RCALL __ANEGD1
00035c dfc6      	RCALL __DIVD21U
00035d 01fd      	MOVW R30,R26
00035e 01bc      	MOVW R22,R24
00035f f40e      	BRTC __MODD212
000360 dfb9      	RCALL __ANEGD1
                 __MODD212:
000361 9508      	RET
                 
                 __CHKSIGND:
000362 94e8      	CLT
000363 ff77      	SBRS R23,7
000364 c002      	RJMP __CHKSD1
000365 dfb4      	RCALL __ANEGD1
000366 9468      	SET
                 __CHKSD1:
000367 ff97      	SBRS R25,7
000368 c00b      	RJMP __CHKSD2
000369 2400      	CLR  R0
00036a 95a0      	COM  R26
00036b 95b0      	COM  R27
00036c 9580      	COM  R24
00036d 9590      	COM  R25
00036e 9611      	ADIW R26,1
00036f 1d80      	ADC  R24,R0
000370 1d90      	ADC  R25,R0
000371 f800      	BLD  R0,0
000372 9403      	INC  R0
000373 fa00      	BST  R0,0
                 __CHKSD2:
000374 9508      	RET
                 
                 __PUTPARD1:
000375 937a      	ST   -Y,R23
000376 936a      	ST   -Y,R22
000377 93fa      	ST   -Y,R31
000378 93ea      	ST   -Y,R30
000379 9508      	RET
                 
                 __BSTB1:
00037a 94e8      	CLT
00037b 2400      	CLR  R0
00037c 11e0      	CPSE R30,R0
00037d 9468      	SET
00037e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  17 r1 :   5 r2 :   1 r3 :   0 r4 :   3 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   7 r17:   2 r18:   2 r19:   9 r20:  11 r21:   8 r22:  32 r23:  31 
r24:  31 r25:  15 r26:  46 r27:  10 r28:  15 r29:   1 r30: 214 r31:  60 
x  :   3 y  : 110 z  :   9 
Registers used: 23 out of 35 (65.7%)

ATmega8 instruction use summary:
adc   :   6 add   :   2 adiw  :  15 and   :   0 andi  :   1 asr   :   0 
bclr  :   0 bld   :   4 brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 
break :   0 breq  :   7 brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 
brie  :   0 brlo  :   2 brlt  :   0 brmi  :   0 brne  :  16 brpl  :   0 
brsh  :   2 brtc  :   2 brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 
bst   :   1 cbi   :  20 cbr   :   0 clc   :   1 clh   :   0 cli   :   1 
cln   :   0 clr   :  20 cls   :   0 clt   :   3 clv   :   0 clz   :   0 
com   :  12 cp    :   0 cpc   :   1 cpi   :   9 cpse  :   1 dec   :   8 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   1 ld    :  17 ldd   :  28 ldi   : 155 lds   :   0 
lpm   :   9 lsl   :   2 lsr   :   1 mov   :   7 movw  :  15 mul   :   0 
muls  :   0 mulsu :   0 neg   :   0 nop   :   1 or    :   0 ori   :   1 
out   :  25 pop   :   9 push  :   9 rcall : 147 ret   :  39 reti  :   3 
rjmp  :  75 rol   :   8 ror   :   0 sbc   :   3 sbci  :   7 sbi   :  14 
sbic  :  11 sbis  :   6 sbiw  :  11 sbr   :   1 sbrc  :   1 sbrs  :   3 
sec   :   1 seh   :   0 sei   :   0 sen   :   0 ser   :   0 ses   :   0 
set   :   4 sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  46 
std   :  22 sts   :   0 sub   :   1 subi  :  15 swap  :   0 tst   :   1 
wdr   :   1 
Instructions used: 59 out of 109 (54.1%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006fe   1684    106   1790    8192  21.9%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 2 warnings
